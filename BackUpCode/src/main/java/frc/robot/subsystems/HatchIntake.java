package frc.robot.subsystems;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.shuffleboard.BuiltInWidgets;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import frc.robot.commands.*;
/**
 * Add your docs here.
 */
public class HatchIntake extends Subsystem {
  
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public DoubleSolenoid hatchExtend;
    public WPI_TalonSRX hatchRotate;
    public int position;
    public static ShuffleboardTab tab = Shuffleboard.getTab("SmartDashboard");
    public NetworkTableEntry hatchPos =
    tab.add("hatch position", 0).withWidget(BuiltInWidgets.kGraph)
      .getEntry();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public HatchIntake() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
       // hatchExtend = new DoubleSolenoid(6, 2);
        
        hatchRotate = new WPI_TalonSRX(9);
        extend();
        
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        setDefaultCommand(new moveHatchIntake());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }


    public void extend() {
        //hatchExtend.set(Value.kForward);
    }


    public void reverse() {
        //hatchExtend.set(Value.kReverse);
    }


    public void updatePos(){
      int pos = hatchRotate.getSelectedSensorPosition();
      hatchPos.setDouble(pos);
      //error.setDouble(arm1.getIntegralAccumulator());
    }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

