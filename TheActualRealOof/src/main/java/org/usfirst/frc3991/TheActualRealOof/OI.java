// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3991.TheActualRealOof;

import org.usfirst.frc3991.TheActualRealOof.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc3991.TheActualRealOof.subsystems.*;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.shuffleboard.*;
import edu.wpi.first.wpilibj.buttons.POVButton;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick joystick1 = new Joystick(0);

    Button LB = new JoystickButton(joystick1, 5); //Low Shift
    Button RB = new JoystickButton(joystick1, 6); //High Shift
    Button STRT = new JoystickButton(joystick1, 8);
    Button BACK = new JoystickButton(joystick1, 7);
    Button X = new JoystickButton(joystick1, 3);
    Button A = new JoystickButton(joystick1, 1);
    Button B = new JoystickButton(joystick1, 2);
    Button Y = new JoystickButton(joystick1, 4);
    POVButton d_up = new POVButton(joystick1,0);
	POVButton d_down = new POVButton(joystick1,4);
	POVButton d_left = new POVButton(joystick1,6);
	POVButton d_right = new POVButton(joystick1,2);

    /*Button DPAD_DOWN = new Button(){
    
        @Override
        public boolean get() {

            if(joystick1.getPOV() == 180) {
                return true;
            } 

            return false;
        }
    };

    Button DPAD_RIGHT = new Button(){
    
        @Override
        public boolean get() {

            if(joystick1.getPOV() == 90) {
                return true;
            } 

            return false;
        }
    };

    Button DPAD_UP = new Button(){
    
        @Override
        public boolean get() {

            if(joystick1.getPOV() == 0) {
                return true;
            } 

            return false;
        }
    };

    Button DPAD_LEFT = new Button(){
    
        @Override
        public boolean get() {

            if(joystick1.getPOV() == 270) {
                return true;
            } 

            return false;
        }
    };*/

    NetworkTable table;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        //joystick1 = new Joystick(0);
        table = NetworkTableInstance.getDefault().getTable("limelight");
        ShuffleboardTab tab = Shuffleboard.getTab("SmartDashboard");
            tab.add("Autonomous Command", new AutonomousCommand());
            tab.add("intakeCargo", new intakeCargo());
            tab.add("intakeHatch", new intakeHatch());
            tab.add("moveArm", new moveArm());
            tab.add("outtakeHatch", new outtakeHatch());
            tab.add("outtakeCargo", new outtakeCargo(1));
            tab.add("armToIntakePos", new armToIntakePos());
            tab.add("armToOuttakePos", new armToOuttakeFrontPos());
            tab.add("armToOuttakeBackPos", new armToOuttakeBackPos());
            tab.add("armToDefencePos", new armToDefence());
            tab.add("hatchTargetingCommand", new HatchTargetingCommand());
            tab.add("shiftUp", new shiftUp());
            tab.add("shiftDown", new shiftDown());
        NetworkTableEntry position = 
            tab.add("Arm Position", 0)
                .getEntry();
        position.setDouble(Robot.arm.position);
        NetworkTableEntry leftPow = 
            tab.add("leftPow", 0)
                .getEntry();
        leftPow.setDouble(Robot.driveTrain.leftPow);
        NetworkTableEntry rightPow =
            tab.add("rightPow", 0)
                .getEntry();
        rightPow.setDouble(Robot.driveTrain.rightPow);


        //SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("intakeCargo", new intakeCargo());
        SmartDashboard.putData("intakeHatch", new intakeHatch());
        SmartDashboard.putData("moveArm", new moveArm());
        SmartDashboard.putData("outtakeHatch", new outtakeHatch());
        //SmartDashboard.putData("outtakeCargo", new outtakeCargo());
        SmartDashboard.putData("armToIntakePos", new armToIntakePos());
        SmartDashboard.putData("armToOuttakePos", new armToOuttakeFrontPos());
        SmartDashboard.putData("armToOuttakeBackPos", new armToOuttakeBackPos());
        SmartDashboard.putNumber("Arm Position", Robot.arm.position);
                
        //SHIFT CODE HERE: 
        LB.whenPressed(new shiftDown());
        RB.whenPressed(new shiftUp());

        //HATCH CODE HERE:
        STRT.whenPressed(new intakeHatch());
        BACK.whenPressed(new outtakeHatch());

        //OUTTAKE CODE HERE 
        X.whenPressed(new outtakeCargo(1));
        A.whenPressed(new intakeCargo());
        Y.whenPressed(new HatchTargetingCommand());

        //CARGO POS CODE HERE, MUST USE POV
        d_down.whenPressed(new armToIntakePos());
        d_right.whenPressed(new armToOuttakeFrontPos());
        d_left.whenPressed(new armToOuttakeBackPos());
        d_up.whenPressed(new armToDefence());


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick1() {
        return joystick1;
    }
    public double getThrottle(){
        return joystick1.getRawAxis(3) - joystick1.getRawAxis(2);
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

